module vga_health_display(
    input logic clk,
    input logic resetN,
    input logic got_hit,        // Signal indicating the player got hit
    output logic [9:0] vga_x,   // VGA x-coordinate
    output logic [8:0] vga_y,   // VGA y-coordinate
    output logic [7:0] vga_color // VGA color output
);

    parameter MAX_HEALTH = 100;
    parameter HEALTH_DECREMENT = 25;
    parameter SCREEN_WIDTH = 680;
    parameter SCREEN_HEIGHT = 340;
    parameter CHAR_WIDTH = 8;
    parameter CHAR_HEIGHT = 8;

    logic [7:0] health;         // Health value (0 to 100)

    // Font ROM (for simplicity, this example uses a very basic font for digits and letters)
    logic [7:0] font_rom [0:127][0:7]; // 128 characters, 8x8 pixels each

    initial begin
        // Initialize the font ROM (simplified example for 'H', 'P', ':', '0'-'9')
        font_rom["H"][0] = 8'b10010010;
        font_rom["H"][1] = 8'b10010010;
        font_rom["H"][2] = 8'b11111110;
        font_rom["H"][3] = 8'b10010010;
        font_rom["H"][4] = 8'b10010010;
        font_rom["H"][5] = 8'b10010010;
        font_rom["H"][6] = 8'b10010010;
        font_rom["H"][7] = 8'b00000000;

        font_rom["P"][0] = 8'b11111100;
        font_rom["P"][1] = 8'b10000010;
        font_rom["P"][2] = 8'b11111100;
        font_rom["P"][3] = 8'b10000000;
        font_rom["P"][4] = 8'b10000000;
        font_rom["P"][5] = 8'b10000000;
        font_rom["P"][6] = 8'b10000000;
        font_rom["P"][7] = 8'b00000000;

        font_rom[":"][0] = 8'b00000000;
        font_rom[":"][1] = 8'b00110000;
        font_rom[":"][2] = 8'b00110000;
        font_rom[":"][3] = 8'b00000000;
        font_rom[":"][4] = 8'b00000000;
        font_rom[":"][5] = 8'b00110000;
        font_rom[":"][6] = 8'b00110000;
        font_rom[":"][7] = 8'b00000000;

        for (int i = 0; i < 10; i++) begin
            font_rom["0" + i][0] = 8'b01111110;
            font_rom["0" + i][1] = 8'b10000010;
            font_rom["0" + i][2] = 8'b10000010;
            font_rom["0" + i][3] = 8'b10000010;
            font_rom["0" + i][4] = 8'b10000010;
            font_rom["0" + i][5] = 8'b10000010;
            font_rom["0" + i][6] = 8'b01111110;
            font_rom["0" + i][7] = 8'b00000000;
        end
    end

    // Update health on hit
    always_ff @(posedge clk or negedge resetN) begin
        if (!resetN) begin
            health <= 8'd100;  // Full health on reset
        end else if (got_hit) begin
            if (health >= HEALTH_DECREMENT) begin
                health <= health - HEALTH_DECREMENT; // Reduce health by decrement
            end else begin
                health <= 8'd0;  // Prevent underflow
            end
        end
    end

    // Convert health value to characters
    logic [7:0] health_str [2:0];
    always_comb begin
        health_str[2] = "0" + (health % 10);
        health_str[1] = "0" + ((health / 10) % 10);
        health_str[0] = "0" + ((health / 100) % 10);
    end

    // VGA display logic
    always_comb begin
        vga_color = 8'b00000000;  // Default to black

        // Draw "HP: XXX" at the top right corner
        if (vga_x >= SCREEN_WIDTH - 5 * CHAR_WIDTH && vga_y < CHAR_HEIGHT) begin
            logic [2:0] char_index;
            char_index = (vga_x - (SCREEN_WIDTH - 5 * CHAR_WIDTH)) / CHAR_WIDTH;

            logic [7:0] char;
            case (char_index)
                0: char = "H";
                1: char = "P";
                2: char = ":";
                3: char = health_str[0];
                4: char = health_str[1];
                5: char = health_str[2];
                default: char = 8'b00000000;
            endcase

            if (font_rom[char][vga_y % CHAR_HEIGHT][vga_x % CHAR_WIDTH]) begin
                vga_color = 8'b11111111; // White color for text
            end
        end
    end

endmodule
